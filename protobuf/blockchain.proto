syntax = "proto3";

message Block {
    uint32 size = 1;
    bytes hash = 2;
    uint32 height = 3;
    BlockHeader header = 4;
    uint32 transaction_count = 5;
    repeated Transaction tx = 6;
};
message BlockHeader {
    // As defined in Bitcoin
    uint32 version = 1;
    bytes previous_hash = 2;
    bytes merkle_root = 3;
    uint32 timestamp = 4;
    uint32 difficulty = 5;
    uint32 nonce = 6;
}
message Transaction {
    // Following Bitcoin's Transaction structure, the transaction hash
    // is not part of the transaction itself, but is calculated from the
    // transaction data on each client.
    // An other difference is we do not store input and output counts
    // because they are not needed by the protobuf.
    bytes version = 1;
    repeated TxInput inputs = 2;
    repeated TxOutput outputs = 3;
    uint32 locktime = 4;
};

// TxInput.script_sig and TxOutput.script_pubkey have exactly the
// same format. One can actually check if
// oldOutput = TxInput.txid.vout
// TxInput.script_sig == oldOutput.script_pubkey
//
// TBD is we actually need TxOutput.script_pubkey!!!
message TxInput {
  bytes txid = 1;              // 32-byte hash of previous transaction
  uint32 vout = 2;             // Output index in previous transaction
  bytes script_sig = 3;        // Unlocking script (scriptSig)
  uint32 sequence = 4;         // Sequence number
}

// Transaction Output
message TxOutput {
  uint64 value = 1;            // Amount in satoshis
  bytes script_pubkey = 2;     // Locking script (scriptPubKey)
}

/*
The following are the messages used to store data in the database.
They are slightly modified versions of the original messages, to allow more
efficient reads and writes.
*/
message DbBlock {
    bytes hash = 1;
    uint32 height = 2;
    BlockHeader header = 3;
    uint32 transaction_count = 4;
    // In the database, we store transaction hashes instead of
    // the transaction data itself.
    // Each transaction is stored separately in the database
    // using the calculated hash as the key.
    repeated bytes txid = 5;
};

message Utxo {
  bytes txid = 1;
  uint32 vout = 2;
  TxOutput output = 3;
}
