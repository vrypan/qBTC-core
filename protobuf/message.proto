syntax = "proto3";

message BlocksRequest {
  uint64 start_block_number = 2;
  optional uint64 stop_block_number = 3;
};

message HeightMessage {
    uint64 height = 1;
};
message PeersMessage {
    repeated Peer peers = 1;
};
message Peer {
    string address = 1;
    uint64 height = 2;
    uint64 last_seen = 3;
};

message Block {
    uint32 version = 1;
    bytes previous_hash = 2;
    bytes block_hash = 3;
    bytes merkle_root = 4;
    uint64 timestamp = 5;
    uint32 bits = 6;
    uint32 nonce = 7;
    bytes miner_address = 8;
    repeated Transaction tx = 9;
};

message Transaction {
  bytes txid = 1;
  repeated Input inputs = 2;
  repeated Output outputs = 3;
  TransactionBody body = 4;
  uint64 timestamp = 5;
};

message TransactionBody {
  bytes msg_str = 1;
  bytes pubkey = 2;
  bytes signature = 3;
};

message Input {
  bytes txid = 1;
  uint32 utxo_index = 2;
  bytes sender = 3;
  bytes receiver = 4;
  uint64 amount = 5;
  bool spent = 6;
};

message Output {
  bytes txid = 1;
  uint32 utxo_index = 2;
  bytes sender = 3;
  bytes receiver = 4;
  uint64 amount = 5;
  bool spent = 6;
};

// GossipMessage is used to exchange messages between nodes in the network.
// At the moment only type=BLOCK is supported (gossip a new block), but other
// types can be supported in the future, without affecting nodes running an
// older version.
message GossipMessage {
    GossipMessageType type = 1;
    oneof data {
        Block block = 2;
    }
};

enum GossipMessageType {
    UNKNOWN = 0;
    BLOCK = 1;
};
